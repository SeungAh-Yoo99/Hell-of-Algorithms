//문제 링크:https://www.acmicpc.net/source/84649290
//시간: 100ms
//메모리: 14120

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {
    static int n;
    static boolean[][] graph;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());
        int m = Integer.parseInt(br.readLine());
        
        graph = new boolean[n+1][n+1];

        StringTokenizer st;
        for(int i=0; i<m; i++){
            st = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st.nextToken());
            int b = Integer.parseInt(st.nextToken());

            //연결된 컴퓨터 
            graph[a][b] = true;
            graph[b][a] = true;
        }

        System.out.println(bfs(1));
    }

    static int bfs(int num) {
        int count = 0;
        boolean[] visited = new boolean[n + 1];
        // bfs는 queue를 이용해 연결된 형제요소들 먼저 탐색
        Queue<Integer> queue = new LinkedList<>();
        // 방문한 컴퓨터 
        visited[num] = true;
        queue.add(num);

        int pop;
        while (!queue.isEmpty()) {
            pop = queue.poll();

            for (int i = 1; i <= n; i++) {
                if (graph[pop][i] && !visited[i]) {
                    // 연결된 형제노드 넣어주기
                    queue.offer(i);
                    visited[i] = true;
                    count++;
                }
            }
        }

        // 정답 반환
        return count;
    }
}
