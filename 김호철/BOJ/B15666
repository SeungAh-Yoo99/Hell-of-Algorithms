// 문제 링크:https://www.acmicpc.net/problem/15666
// 시간: 280 ms
// 메모리: 20132 KB

// 전역으로 스트링 빌더를 사용하며 진행하면서 시간과 공간을 줄여보려했는데
// 실패했읍니다.
// 그냥 문자열을 전달하면서 함수를 진행해서 문자열과 다른 문자열과의 결합도를 줄였습니다.
// 문자열로 풀어보니까 int배열을 건네주면서 해도 풀릴것 같네요

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {
    static int N, m;
    static int[] n;


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken()); // n개의 자연수
        m = Integer.parseInt(st.nextToken()); // m개를 고를 예정

        st = new StringTokenizer(br.readLine());

        n = new int[N];

        for(int i = 0 ; i < N ; i++){
            n[i] = Integer.parseInt(st.nextToken());
        }

        Arrays.sort(n);// 우선 정렬

        n = Arrays.stream(n).distinct().toArray(); // 중복 제거

        backTracking(0, n[0],""); // 깊이, 값, 최종 출력할 문자열(처음에는 빈 문자열)



    }
    static void backTracking(int depth, int number, String s){

        if(depth == m){
            System.out.println(s); // 원하는 길이까지 왔을 때  문자열 출력 후 종료
            return;               
        }

        for(int i = 0 ; i < n.length ; i++){
            if(number <= n[i]){
                if(depth==0){
                    backTracking(depth+1, n[i],s+ n[i]); // 첫 번째 수 입력할 때는 앞에 공백 없이
                    continue;
                }
                backTracking(depth+1, n[i],s+" " + n[i]); // 아닐 때는 한 칸 띄어서 추가했다.
            }
        }
    }
}
